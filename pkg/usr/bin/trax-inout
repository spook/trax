#!/usr/bin/perl -w
use strict;
use FindBin;
use Config::Std;
use DBI;
use Fcntl;
use Getopt::Long;
use Pod::Usage;
use POSIX qw(strftime);
use Tk;
use Tk::NumKeypad;
use Tk::ROText;
use utf8;

use lib "$FindBin::RealBin/../lib";
use trax;
use trax::db;
#use htx::pos_db;
#use htx::pos_style;
#use htx::scan;
#use htx::ticket;

my @SCAN_QUEUE = ();    # Scan queue contains scan items
my $GTIME = q{};
my $GAP = 30;

my $opts = {};
GetOptions ($opts, "help|h",
                   "config-file|c=s",
                   "inport|i=s",
                   "outport|o=s",
                   "verbose|v") or pod2usage(2);
pod2usage(1) if $opts->{help};

# Globals & config
my $ck = {};
read_config $opts->{'config-file'}||$CONFIG_FILE => $ck->{cfg};

# Database setup
connect_db($ck);

# Setup and show the GUI
layout_screen($ck);

# Start the watchers for the scanner ports
my $iport = $opts->{inport}  || '/dev/ttyS0';
my $oport = $opts->{outport} || '/dev/ttyS1';
$ck->{ihandle} = undef;
$ck->{ohandle} = undef;
if (sysopen(ISCANHANDLE, $iport, O_NONBLOCK)) {
    $ck->{iport} = $iport;
    $ck->{ihandle} = \*ISCANHANDLE;
}
else {
    print "--- Unable to open IN scanport $iport : $!\n";
    print "  - Continuing anyway...";
}
if (sysopen(OSCANHANDLE, $oport, O_NONBLOCK)) {
    $ck->{oport} = $oport;
    $ck->{ohandle} = \*OSCANHANDLE;
}
else {
    print "--- Unable to open OUT scanport $iport : $!\n";
    print "  - Continuing anyway...";
}
$ck->{scan_tmr}
    = $ck->{mw}->repeat(333, sub {check_scanport($ck,0);
                                  check_scanport($ck,1);});

MainLoop;
exit 0;

                            ####### O #######

# Layout main screen
sub layout_screen {
    my $ck = shift;
    my $mw = $ck->{mw} = MainWindow->new( -background => $COLOR_BG );

    # Set us fullscreen
    my $sh = $mw->screenheight;
    my $sw = $mw->screenwidth;
    $sh = 768 if $sh > 768;     # TEMP
    $sw = 1024 if $sw > 1024;   # TEMP
    $sh -= 50;  # TEMP
    $mw->geometry("${sw}x${sh}+0+0");
    $mw->resizable( 0, 0 );    # Can't change size
#    $mw->overrideredirect(1);  # remove all window decorations
    $mw->title("Hauntix Access Control");

    $ck->{scan_queue_frame} = $mw->Frame(-background => '#331111', -borderwidth => 3, -relief=>'groove')
        ->form(-left =>  '%0', -right =>  '%74', -top =>  '%0', -bottom => '%100');
    $ck->{manual_entry_frame} = $mw->Frame(-background => '#113311', -borderwidth => 3, -relief=>'groove')
        ->form(-left => '%75', -right => '%100', -top =>  '%0', -bottom =>  '%64');
    $ck->{command_frame} = $mw->Frame(-borderwidth => 3, -relief=>'groove')
        ->form(-left => '%75', -right => '%100', -top => '%65', -bottom => '%100');

    layout_scan_queue($ck);
    layout_manual_entry($ck);
    layout_command($ck);

    $ck->{tixno_entry}->focus;
}

sub layout_scan_queue {
    my $ck = shift;
    my $f = $ck->{scan_queue_frame};

    fill_scan_queue($ck);

    # Start the timer to refresh the scan queue
    $f->repeat(1000, sub {update_scan_queue($ck);});
    }

sub fill_scan_queue {
    my $ck = shift;
    my $f = $ck->{scan_queue_frame};

    # Clear old items from the queue
    my $now = time();
    while (@SCAN_QUEUE) {
        my $top = $SCAN_QUEUE[0];
        last if (($now - $top->{scantime}) < 30);
        # Old, remove it
        shift @SCAN_QUEUE;
    }

    # Any scans to show?
    if (!@SCAN_QUEUE) {
        $f->Label(-font => $FONT_LG,
                  -text => " Ready For Scans ")->pack(-anchor => 'center', -expand => 1);
        return;
    }

    # Show 'em...
    foreach my $scan (@SCAN_QUEUE) {
        $f->Label(-font => $FONT_LG,
                  -text => "Ticket $scan->{tixno}: $scan->{status}",
                  -background => $scan->{state}? '#33ff33' : '#ff3333',
                 )->pack();
    }

}

sub update_scan_queue {
    my $ck = shift;
    my $f = $ck->{scan_queue_frame};

    # Delete existing items in the frame
    foreach my $kid ($f->children()) {
        $kid->destroy() if Tk::Exists $kid;
    }

    # Redraw it
    return fill_scan_queue($ck);
}

sub layout_manual_entry {
    my $ck = shift;
    my $f = $ck->{manual_entry_frame};

    $f->Label(-font => $FONT_MD,
              -text => "Manual Ticket Number Entry")->pack();
    my $e = $ck->{tixno_entry} = $f->Entry(-font => $FONT_XL, 
                                            -justify => 'center')->pack;
    $e->bind("<KP_Enter>" => sub {check_ticket($ck);});
    $e->bind("<Key-Return>" => sub {check_ticket($ck);});
    $e->bind("<Key-space>" => sub {check_ticket($ck);});

    $f->NumKeypad(-font => $FONT_XXL, -entry => $e)->pack();
    $f->Button(-font => $FONT_LG, -text => "Check Ticket", -command => sub {check_ticket($ck);})
        ->pack();
    $f->Button(-font => $FONT_LG, -text => "Add Trolls", -command => sub {add_sidein($ck);})
        ->pack(-pady => 7);
}

sub layout_command {
    my $ck = shift;
    my $f = $ck->{command_frame};

    $ck->{clock_lbl} = $f->Label(
        -text => "Loading...\n00:00:00",
        -font => $FONT_BG
    )->pack();
    $ck->{clock_tmr}
        = $f->repeat(1000, sub {update_current_time($ck->{clock_lbl})});
    $f->Label(-text => "\nTime Since Last Group", -font => $FONT_SM)->pack();
    $ck->{gaptm_lbl} = $f->Label(
        -text => "0",
        -font => $FONT_XXL
    )->pack();
    $ck->{gaptm_tmr}
        = $f->repeat(900, sub {update_gap_time($ck->{gaptm_lbl})});

    $f->Button(-text    => "Quit",
               -font => $FONT_MD,
               -command => sub {exit 0},
              )->pack(-side => 'bottom');
 
}

sub update_current_time {
    my $lbl = shift;
    $lbl->configure(
        -text => strftime("%a %d-%b-%Y\n%H:%M:%S %Z", localtime(time())));
}

sub update_gap_time {
    my $lbl = shift;
    my $t = q{---};
    $t = time()-$GTIME if $GTIME;
    $lbl->configure(-text => $t);
}

# For entries where people are let-in with out a ticket.
# We'll make a scan record for each, with a scnNumber of 0.
sub add_sidein {
    my $ck = shift;
    my $cfg = $ck->{cfg};
    my $e = $ck->{tixno_entry};
    my $count = int($e->get() || 0);
    print "Adding side-in count $count\n"
        if $opts->{verbose};
    if ($count > 100 || $count <= 0) {
        # More than 100?  that's not right!  Usually a half-dozen at a time.
        $e->delete(0, 'end');
        $e->insert(0, $count > 0? 'Too Many!' : 'How Many?!');
        $e->after(4700, sub {$e->delete(0, 'end');});
        system("aplay -q $cfg->{sound}->{acc_badcount} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_badcount};
        return 0;
    }

    # Add the records
    for (1..$count) {
        my $scanrec = htx::scan->new(-htx => $ck,
                                     -scnNumber => 0,
                                     -scnStatus => "side-in",
                                     -scnResult => "Allowed",
                                    );
        if ($scanrec->error()) {
            ### TODO:  Need better error report method
            print "*** unable to create scan record: " . $scanrec->error() . "\n";
            last;
        }
        print "  scnId=" . $scanrec->{scnId} . "\n"
            if $opts->{verbose};
    }
    system("aplay -q $cfg->{sound}->{acc_sidein} &")
        if $cfg->{sound}->{enabled} 
        && -r $cfg->{sound}->{acc_sidein};

    # Clear the entry for the next time
    $e->delete(0, 'end');
}

sub check_ticket {
    my $ck = shift;
    my $cfg = $ck->{cfg};
    my $e = $ck->{tixno_entry};
    my $tixno = $e->get();
    print "Checking ticket $tixno\n"
        if $opts->{verbose};

    # TODO: check recent scans for dups
    foreach my $sb (@SCAN_QUEUE) {
        if ($sb->{tixno} == $tixno) {
            # Duplicate scan
            $e->delete(0, 'end');
            system("aplay -q $cfg->{sound}->{acc_dup} &")
                if $cfg->{sound}->{enabled} 
                && -r $cfg->{sound}->{acc_dup};
            print "  Duplicate scan\n"
                if $opts->{verbose};
            return;
        }
    }

    # create a scan blob
    my $scanblob = { tixno => $tixno,
                     scantime => time(),
                     status => 'Checking...',
                     state  => undef,   # undef, 0 or 1 - simple state to test  ### TODO: make constants
                     tix => undef,      # Ticket object
                   };
    push @SCAN_QUEUE, $scanblob;

    # Look for the ticket
    my ($tixId, $tixCode) = htx::ticket::untixno($tixno);
    my $tix = $scanblob->{tix} = htx::ticket->load(-htx => $ck, -tixId => $tixId);
    if ($tix->error) {
        $scanblob->{status} = "No Such Ticket";
        $scanblob->{state} = 0;
        system("aplay -q $cfg->{sound}->{acc_deny} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_deny};
    }
    elsif ($tix->{tixCode} != $tixCode) {
        $scanblob->{status} = "Invalid Ticket";
        $scanblob->{state} = 0;
        system("aplay -q $cfg->{sound}->{acc_deny} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_deny};
    }
    elsif (($tix->{tixState} eq $TIX_STATE_IDLE)
        || ($tix->{tixState} eq $TIX_STATE_HELD)) {
        $scanblob->{status} = "Ticket Not Yet Sold";
        $scanblob->{state} = 0;
        system("aplay -q $cfg->{sound}->{acc_deny} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_deny};
    }
    elsif ($tix->{tixState} eq $TIX_STATE_VOID) {
        $scanblob->{status} = "Ticket is VOID";
        $scanblob->{state} = 0;
        system("aplay -q $cfg->{sound}->{acc_deny} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_deny};
    }
    elsif ($tix->{tixState} ne $TIX_STATE_SOLD) {
        $scanblob->{status} = "Ticket Already Used";
        $scanblob->{state} = 0;
        system("aplay -q $cfg->{sound}->{acc_deny} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_deny};
    }
    else {
        # Is OK
        $scanblob->{status} = "Entry OK";
        $scanblob->{state} = 1;
        system("aplay -q $cfg->{sound}->{acc_ok} &")
            if $cfg->{sound}->{enabled} 
            && -r $cfg->{sound}->{acc_ok};
    }
    print "  State: $scanblob->{state}  Status: $scanblob->{status}\n"
        if $opts->{verbose};
    $GTIME = time()
        if $scanblob->{state} && (!$GTIME || (time()-$GTIME) > $GAP);

    # Create the scan record
    my $scanrec = htx::scan->new(-htx => $ck,
                                 -scnNumber => $tixno,
                                 -scnStatus => $scanblob->{status},
                                 -scnResult => $scanblob->{state}? "Allowed" : "Denied",
                                );
    if ($scanrec->error()) {
        print "*** unable to create scan record: " . $scanrec->error() . "\n";
    }
    print "  scnId=" . $scanrec->{scnId} . "\n"
        if $opts->{verbose};

    # Mark the ticket as Used
    if ($scanblob->{state}) {
        $tix->{tixState} = $TIX_STATE_USED;
        $tix->save;
        if ($tix->error) {
            print "*** Error marking ticket as used: " . $tix->error . "\n";
        }
    }

    # Clear the entry for the next time
    $e->delete(0, 'end');
}

sub check_scanport {
    my ($ck,$io) = @_;
    my $scanport = $io? $ck->{oport}   : $ck->{iport};
    my $h        = $io? $ck->{ohandle} : $ck->{ihandle};
    my $pname    = $io? "OUT" : "IN";

    my $buf;
    my $n = sysread($h, $buf, 100);
    return if !defined($n);

    chomp $buf;
    my $eid = int($buf||q{0}) || 0;
    return if !$eid;
    print "Member ID $eid scanned on $pname port $scanport\n"
        if $opts->{verbose};

#    my $e = $ck->{tixno_entry};
#    $e->delete(0, 'end');
#    $e->insert(0, $tixno);

#    check_ticket($ck);
}

__END__

=head1 NAME

trax-inout - trax In/Out Time Tracking GUI (like a punchclock)

=head1 SYNOPSIS

 trax-inout [options]

 Options:
  -h    --help          Usage summary
  -c    --config-file   Alternate config file
  -i    --inport        Serial port for "in" scanner, default is /dev/ttyS0
  -o    --outport       Serial port for "out" scanner, default is /dev/ttyS1
  -v    --verbose       Verbose output

=head1 DESCRIPTION

Used at scan stations for employee/volunteer scan-in and scan-out time keeping.

=cut
